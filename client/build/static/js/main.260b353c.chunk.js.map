{"version":3,"sources":["services/api.js","components/Navbar.js","containers/Signup.js","containers/Login.js","components/Question/Question1.js","containers/Questions.js","App.js","serviceWorker.js","index.js"],"names":["login","username","password","axios","post","then","response","data","signup","handleLogout","props","setUser","CustomNavbar","react_default","a","createElement","Navbar","className","bg","Brand","react_router_dom","to","user","Fragment","onClick","Signup","state","handleChange","event","_event$target","target","name","value","_this","setState","Object","defineProperty","handleSubmit","_this$state","preventDefault","catch","err","console","log","Form","onSubmit","this","Group","Label","htmlFor","Control","type","id","onChange","Button","Component","Login","error","message","Alert","variant","TaskForm","title","description","Questions","questions","Question1_TaskForm","Question2_default","App","_this2","components_Navbar","react_router","exact","path","render","Signup_Signup","assign","Login_Login","Questions_Questions","React","Boolean","window","location","hostname","match","get","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.260b353c.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst login = (username, password) =>\n  axios\n    .post(\"/api/auth/login\", { username: username, password: password })\n    .then(response => response.data);\n\nconst signup = (username, password) =>\n  axios\n    .post(\"/api/auth/signup\", { username: username, password: password })\n    .then(response => response.data);\n\nconst logout = () =>\n  axios.post(\"/api/auth/logout\").then(response => response.data);\n\nexport { login, logout, signup };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar } from \"react-bootstrap\";\nimport { logout } from \"../services/api\";\n\nconst handleLogout = props => {\n  logout().then(() => {\n    props.setUser(null);\n  });\n};\n\nconst CustomNavbar = props => {\n  return (\n    <Navbar className=\"nav\" bg=\"primary\">\n      <Navbar.Brand>\n        <Link to=\"/\">Home</Link>\n      </Navbar.Brand>\n      {props.user ? (\n        <>\n          {/* <Navbar.Brand>\n            <Link to=\"/projects\">Projects</Link>\n          </Navbar.Brand> */}\n          <Navbar.Brand>\n            <Link onClick={() => handleLogout(props)} to=\"/\">\n              Logout\n            </Link>\n          </Navbar.Brand>\n        </>\n      ) : (\n        //   <React.Fragment>\n        <>\n          <Navbar.Brand>\n            <Link to=\"/signup\">Signup</Link>\n          </Navbar.Brand>\n          <Navbar.Brand>\n            <Link to=\"/login\">Login</Link>\n          </Navbar.Brand>\n        </>\n      )}\n    </Navbar>\n  );\n};\n\nexport default CustomNavbar;\n","import React, { Component } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { signup } from \"../services/api\";\n\nexport default class Signup extends Component {\n  state = {\n    username: \"\",\n    password: \"\"\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleSubmit = event => {\n    const { username, password } = this.state;\n    event.preventDefault();\n\n    signup(username, password)\n      .then(data => {\n        this.props.setUser(data);\n        // this.props.history.push(\"/projects\");\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username:</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"username\"\n            id=\"username\"\n            value={this.state.username}\n            onChange={this.handleChange}\n          />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password:</Form.Label>\n          <Form.Control\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange}\n          />\n        </Form.Group>\n\n        <Button type=\"submit\">Signup</Button>\n      </Form>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { login } from \"../services/api\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\nexport default class Login extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    error: \"\"\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleSubmit = event => {\n    const { username, password } = this.state;\n\n    event.preventDefault();\n\n    login(username, password)\n      .then(data => {\n        this.props.setUser(data);\n        // this.props.history.push(\"/projects\");\n      })\n      .catch(err => {\n        this.setState({ error: err.response.data.message });\n      });\n  };\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username:</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"username\"\n            id=\"username\"\n            value={this.state.username}\n            onChange={this.handleChange}\n          />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password:</Form.Label>\n          <Form.Control\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange}\n          />\n        </Form.Group>\n\n        {this.state.error && (\n          <Alert variant=\"warning\">{this.state.error}</Alert>\n        )}\n\n        <Button type=\"submit\">Login</Button>\n      </Form>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nexport default class TaskForm extends Component {\n  state = {\n    title: \"\",\n    description: \"\"\n  };\n\n  handleChange = event => {\n/*     const { name, value } = event.target;\n    this.setState({ [name]: value }); */\n  };\n\n  handleSubmit = event => {\n    /* event.preventDefault();\n\n    const { title, description } = this.state;\n\n    axios\n      .post(\"/api/tasks\", {\n        title,\n        description,\n        projectId: this.props.projectId\n      })\n      .then(response => {\n        this.props.refreshData();\n        this.setState({ title: \"\", description: \"\" });\n      })\n      .catch(err => {\n        console.log(err);\n      }); */\n  };\n\n  render() {\n    return (\n      <div>\n        {/* <hr />\n        <h3>Add interests: </h3>\n        <div className=\"questions\">\n        <h2 className=\"form-title\" id=\"question\" ><span>or</span>Info</h2>\n        <div className=\"form-holder\">\n          <input type=\"text\" className=\"input\" name=\"signupUsername\" id=\"signupUsername\" value={this.state.username} onChange={this.handleChange} placeholder=\"Username\" />\n          <input type=\"email\" className=\"input\" placeholder=\"Email\" />\n          <input type=\"password\" className=\"input\" name=\"signupPassword\" id=\"password\" value={this.state.password} onChange={this.handleChange} placeholder=\"Password\" />\n        </div>\n        <button className=\"submit-btn\" onClick={this.handleSubmit}>Sign up</button> */}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport Question1 from \"../components/Question/Question1\";\nimport Question2 from \"../components/Question/Question2\";\n\nexport default class Questions extends Component {\n  state = {\n    questions: []\n  };\n\n/*   getData = () => {\n    axios\n      .get(\"/api/questions\")\n      .then(response => {\n        this.setState({\n          questions: response.data\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  componentDidMount() {\n    this.getData();\n  }\n */\n\n  render() {\n    return (\n<div className=\"form-body\">\n    <div className=\"form-structor\">\n      <Question1 />\n      <Question2 />\n      </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport \"./App.scss\";\n\n\nimport Signup from \"./containers/Signup\";\nimport Login from \"./containers/Login\";\nimport Questions from \"./containers/Questions\"\n\nclass App extends React.Component {\n  state = {\n    user: this.props.user\n  };\n\n  setUser = user => {\n    this.setState({\n      user: user\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar setUser={this.setUser} user={this.state.user} />\n        <Switch>\n          { <Route\n            exact\n            path=\"/signup\"\n            render={props => {\n              return <Signup setUser={this.setUser} {...props} />;\n            }}\n          /> }\n          <Route\n            exact\n            path=\"/login\"\n            render={props => {\n              return <Login setUser={this.setUser} {...props} />;\n            }}\n          />\n          <Route\n            exact\n            path=\"/question\"\n            render={props => {\n              return <Questions setUser={this.setUser} {...props} />;\n            }}\n          />\n          {/* <Route exact path=\"/projects\" component={Projects} />\n          <Route exact path=\"/projects/:id\" component={ProjectDetails} />\n          <Route exact path=\"/tasks/:id\" component={TaskDetails} /> */}\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport axios from \"axios\";\n\naxios\n  .get(\"/api/auth/loggedin\")\n  .then(response => {\n    ReactDOM.render(\n      <BrowserRouter>\n        <App user={response.data} />\n      </BrowserRouter>,\n      document.getElementById(\"root\")\n    );\n  })\n  .catch(err => {\n    console.log(err);\n  });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}